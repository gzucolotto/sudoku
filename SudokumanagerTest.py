#!/usr/bin/python

import unittest2 as unittest
import sudokumanager as sm


class SudokumamagerTestCase(unittest.TestCase):

	def test_sudokumanager(self):
	  output = sm.index_grid()
	  expected = ("| 0,  0,  0,  0|| 0,  1,  0,  1|| 0,  2,  0,  2|| 0,  3,  1,  0|| 0,  4,  1,  1|| 0,  5,  1,  2|| 0,  6,  2,  0|| 0,  7,  2,  1|| 0,  8,  2,  2|\n"
		"| 1,  0,  0,  3|| 1,  1,  0,  4|| 1,  2,  0,  5|| 1,  3,  1,  3|| 1,  4,  1,  4|| 1,  5,  1,  5|| 1,  6,  2,  3|| 1,  7,  2,  4|| 1,  8,  2,  5|\n"
		"| 2,  0,  0,  6|| 2,  1,  0,  7|| 2,  2,  0,  8|| 2,  3,  1,  6|| 2,  4,  1,  7|| 2,  5,  1,  8|| 2,  6,  2,  6|| 2,  7,  2,  7|| 2,  8,  2,  8|\n"
		"| 3,  0,  3,  0|| 3,  1,  3,  1|| 3,  2,  3,  2|| 3,  3,  4,  0|| 3,  4,  4,  1|| 3,  5,  4,  2|| 3,  6,  5,  0|| 3,  7,  5,  1|| 3,  8,  5,  2|\n"
		"| 4,  0,  3,  3|| 4,  1,  3,  4|| 4,  2,  3,  5|| 4,  3,  4,  3|| 4,  4,  4,  4|| 4,  5,  4,  5|| 4,  6,  5,  3|| 4,  7,  5,  4|| 4,  8,  5,  5|\n"
		"| 5,  0,  3,  6|| 5,  1,  3,  7|| 5,  2,  3,  8|| 5,  3,  4,  6|| 5,  4,  4,  7|| 5,  5,  4,  8|| 5,  6,  5,  6|| 5,  7,  5,  7|| 5,  8,  5,  8|\n"
		"| 6,  0,  6,  0|| 6,  1,  6,  1|| 6,  2,  6,  2|| 6,  3,  7,  0|| 6,  4,  7,  1|| 6,  5,  7,  2|| 6,  6,  8,  0|| 6,  7,  8,  1|| 6,  8,  8,  2|\n"
		"| 7,  0,  6,  3|| 7,  1,  6,  4|| 7,  2,  6,  5|| 7,  3,  7,  3|| 7,  4,  7,  4|| 7,  5,  7,  5|| 7,  6,  8,  3|| 7,  7,  8,  4|| 7,  8,  8,  5|\n"
		"| 8,  0,  6,  6|| 8,  1,  6,  7|| 8,  2,  6,  8|| 8,  3,  7,  6|| 8,  4,  7,  7|| 8,  5,  7,  8|| 8,  6,  8,  6|| 8,  7,  8,  7|| 8,  8,  8,  8|\n")
	  self.assertEqual(output, expected)

	def test_check_board_complete_success(self):
	  a = [[7, 2, 5, 3, 8, 6, 9, 1, 4],
	    [8, 4, 3, 1, 2, 9, 7, 5, 6],
	    [9, 6, 1, 5, 7, 4, 3, 8, 2],
	    [4, 3, 9, 2, 5, 1, 8, 6, 7],
	    [1, 7, 2, 4, 6, 8, 5, 3, 9],
	    [6, 5, 8, 7, 9, 3, 2, 4, 1],
	    [5, 9, 6, 8, 4, 7, 1, 2, 3],
	    [3, 8, 7, 6, 1, 2, 4, 9, 5],
	    [2, 1, 4, 9, 3, 5, 6, 7, 8]]
	  result = sm.check_board(a)
	  self.assertEqual(result, (1, 0))

	def test_check_board_incomplete(self):
	  a = [[7, 2, 5, 3, 8, 6, 9, 1, 4],
	    [8, 4, 3, 1, 2, 9, 7, 5, 6],
	    [9, 6, 0, 5, 7, 4, 3, 8, 2],
	    [4, 3, 9, 2, 5, 1, 8, 6, 7],
	    [1, 7, 2, 4, 6, 8, 5, 3, 9],
	    [6, 5, 8, 7, 9, 3, 2, 4, 1],
	    [5, 9, 6, 8, 4, 7, 1, 2, 3],
	    [3, 8, 7, 6, 1, 2, 4, 9, 5],
	    [2, 1, 4, 9, 3, 5, 6, 7, 8]]
	  result = sm.check_board(a)
	  self.assertEqual(result, (0, 0))

	def test_check_board_failure_column(self):
	  a = [[7, 2, 5, 3, 8, 6, 9, 1, 4],
	    [8, 4, 3, 1, 2, 9, 7, 5, 6],
	    [9, 6, 1, 2, 7, 4, 3, 8, 2],
	    [4, 3, 9, 2, 5, 1, 8, 6, 7],
	    [1, 7, 2, 4, 6, 8, 5, 3, 9],
	    [6, 5, 8, 7, 9, 3, 2, 4, 1],
	    [5, 9, 6, 8, 4, 7, 1, 2, 3],
	    [3, 8, 7, 6, 1, 2, 4, 9, 5],
	    [2, 1, 4, 9, 3, 5, 6, 7, 8]]
	  result = sm.check_board(a)
	  self.assertEqual(result, (1, 1))

	def test_check_board_failure_line(self):
	  a = [[7, 2, 5, 3, 8, 6, 9, 1, 4],
	    [8, 4, 3, 1, 2, 9, 7, 5, 6],
	    [9, 6, 1, 5, 7, 9, 3, 8, 2],
	    [4, 3, 9, 2, 5, 1, 8, 6, 7],
	    [1, 7, 2, 4, 6, 8, 5, 3, 9],
	    [6, 5, 8, 7, 9, 3, 2, 4, 1],
	    [5, 9, 6, 8, 4, 7, 1, 2, 3],
	    [3, 8, 7, 6, 1, 2, 4, 9, 5],
	    [2, 1, 4, 9, 3, 5, 6, 7, 8]]
	  result = sm.check_board(a)
	  self.assertEqual(result, (1, 1))

	def test_check_board_failure_region(self):
	  a = [[7, 2, 5, 3, 8, 6, 9, 1, 4],
	    [8, 4, 3, 1, 2, 9, 7, 5, 6],
	    [9, 6, 1, 5, 7, 4, 3, 8, 2],
	    [4, 3, 9, 2, 5, 1, 8, 6, 7],
	    [1, 7, 2, 4, 6, 8, 5, 3, 9],
	    [6, 5, 8, 7, 9, 3, 2, 4, 1],
	    [5, 9, 6, 8, 4, 7, 1, 2, 3],
	    [3, 1, 7, 6, 8, 2, 4, 9, 5],
	    [2, 1, 4, 9, 3, 5, 6, 7, 8]]
	  result = sm.check_board(a)
	  self.assertEqual(result, (1, 1))

	def test_check_board_failure_incomplete(self):
	  a = [[7, 2, 5, 3, 8, 6, 9, 1, 4],
	    [8, 4, 3, 1, 2, 9, 7, 5, 6],
	    [9, 6, 1, 2, 7, 4, 3, 8, 2],
	    [4, 3, 9, 2, 5, 1, 8, 6, 7],
	    [1, 7, 0, 4, 6, 8, 5, 3, 9],
	    [6, 5, 8, 7, 9, 3, 2, 4, 1],
	    [5, 9, 6, 8, 4, 7, 1, 2, 3],
	    [3, 8, 7, 6, 1, 2, 4, 9, 5],
	    [2, 1, 4, 9, 3, 5, 6, 7, 8]]
	  result = sm.check_board(a)
	  self.assertEqual(result, (0, 1))

	def test_valid_move_true(self):
	  position = (0, 0)
	  a = [[7, 2, 5, 3, 8, 6, 9, 1, 4],
	    [8, 4, 3, 1, 2, 9, 7, 5, 6],
	    [9, 6, 1, 2, 7, 4, 3, 8, 2],
	    [4, 3, 9, 2, 5, 1, 8, 6, 7],
	    [1, 7, 2, 4, 6, 8, 5, 3, 9],
	    [6, 5, 8, 7, 9, 3, 2, 4, 1],
	    [5, 9, 6, 8, 4, 7, 1, 2, 3],
	    [3, 8, 7, 6, 1, 2, 4, 9, 5],
	    [2, 1, 4, 9, 3, 5, 6, 7, 8]]
	  result = sm.check_valid_move(position, a)
	  self.assertTrue(result)

	def test_valid_move_false_column(self):
	  position = (0, 0)
	  a = [[8, 2, 5, 3, 8, 6, 9, 1, 4],
	    [8, 4, 3, 1, 2, 9, 7, 5, 6],
	    [9, 6, 1, 2, 7, 4, 3, 8, 2],
	    [4, 3, 9, 2, 5, 1, 8, 6, 7],
	    [1, 7, 2, 4, 6, 8, 5, 3, 9],
	    [6, 5, 8, 7, 9, 3, 2, 4, 1],
	    [5, 9, 6, 8, 4, 7, 1, 2, 3],
	    [3, 8, 7, 6, 1, 2, 4, 9, 5],
	    [2, 1, 4, 9, 3, 5, 6, 7, 8]]
	  result = sm.check_valid_move(position, a)
	  self.assertFalse(result)


	def test_valid_move_false_line(self):
	  position = (0, 0)
	  a = [[7, 7, 5, 3, 8, 6, 9, 1, 4],
	    [8, 4, 3, 1, 2, 9, 7, 5, 6],
	    [9, 6, 1, 2, 7, 4, 3, 8, 2],
	    [4, 3, 9, 2, 5, 1, 8, 6, 7],
	    [1, 7, 2, 4, 6, 8, 5, 3, 1],
	    [6, 5, 8, 7, 9, 3, 2, 4, 9],
	    [5, 9, 6, 8, 4, 7, 1, 2, 3],
	    [3, 8, 7, 6, 1, 2, 4, 9, 5],
	    [2, 1, 4, 9, 3, 5, 6, 7, 8]]
	  result = sm.check_valid_move(position, a)
	  self.assertFalse(result)

	def test_valid_move_false_region(self):
	  position = (0, 0)
	  a = [[7, 0, 0, 0, 0, 0, 0, 0, 0],
	       [8, 7, 3, 0, 0, 0, 0, 0, 0],
	       [9, 6, 1, 0, 0, 0, 0, 0, 0],
	       [0, 0, 0, 0, 0, 0, 0, 0, 0],
	       [0, 0, 0, 0, 0, 0, 0, 0, 0],
	       [0, 0, 0, 0, 0, 0, 0, 0, 0],
	       [0, 0, 0, 0, 0, 0, 0, 0, 0],
	       [0, 0, 0, 0, 0, 0, 0, 0, 0],
	       [0, 0, 0, 0, 0, 0, 0, 0, 0]]
	  result = sm.check_valid_move(position, a)
	  self.assertFalse(result)

	def test_valid_check_item_negative(self):
	  result = sm.check_item(-1, ([True] * 9))
	  self.assertFalse(result)

	def test_valid_check_item_10(self):
	  result = sm.check_item(10, ([True] * 9))
	  self.assertFalse(result)

if __name__ == '__main__':
    unittest.main()